{"version":3,"sources":["App.js","index.js"],"names":["App","props","changeGameState","newGameState","state","gameState","singlePlayer","this","setState","className","onClick","changeMode","Component","Game","boardValues","Array","fill","xIsNext","winner","turn","enabled","i","boardCopy","slice","getWinner","move","getBestMove","setTimeout","handleClick","result","forEach","combo","player","win","length","board","scores","score","push","squares","value","resetBoard","Square","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25145765.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      gameState:\"start\",\n      singlePlayer:true\n    }\n  }\n\n  changeGameState=(newGameState)=>{\n    this.state={\n      gameState:newGameState\n    }\n  }\n  \n  changeMode(){\n    if(this.state.gameState!==\"playing\"){\n      this.setState({\n        singlePlayer:!this.state.singlePlayer\n      })\n    }\n  }\n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"changeMode\" onClick={()=>{this.changeMode()}}>\n          <p>Singleplayer: {(this.state.singlePlayer)?\"on\":\"off\"}</p>\n        </button>\n        <Game singlePlayer={this.state.singlePlayer} gameState={this.state.gameState} changeGameState={this.changeGameState}/>\n      </div>\n    );\n  }\n}\n\nclass Game extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      boardValues:Array(9).fill(null),\n      xIsNext:true,\n      winner:null,\n      turn:0,\n      enabled:true\n    }\n  }\n  \n  resetBoard(){\n    this.props.changeGameState(\"start\");\n    this.setState({\n      boardValues:Array(9).fill(null),\n      xIsNext:true,\n      winner:null,\n      turn:0,\n      enabled:true\n    })\n  }\n  \n  handleClick(i){\n    if(this.state.winner===null && this.state.boardValues[i]===null && this.state.enabled){\n      if(this.props.gameState!==\"playing\"){\n        this.props.changeGameState(\"playing\");\n      }\n      let boardCopy=this.state.boardValues.slice();\n      if(this.state.xIsNext){\n        boardCopy[i]=\"x\"\n      } else {\n        boardCopy[i]=\"o\"\n      }\n      this.setState({\n        xIsNext:!this.state.xIsNext,\n        boardValues:boardCopy,\n        turn:this.state.turn+1\n      },()=>{\n        let winner=this.getWinner(boardCopy);\n        if(winner!==null){\n          this.setState({\n            winner:winner\n          })\n        } else {\n          if(this.props.singlePlayer&& !this.state.xIsNext){\n            this.setState({\n              enabled: false\n            },()=>{\n              let move=this.getBestMove();\n              setTimeout(()=>{\n                this.setState({\n                  enabled:true\n                },()=>this.handleClick(move[1]))\n              },500);\n            })\n          }\n        }\n      })\n    }\n  }\n  \n  getWinner(boardValues){\n    const winningCombos=[\n      [0,3,6],\n      [0,1,2],\n      [0,4,8],\n      [1,4,7],\n      [2,5,8],\n      [2,4,6],\n      [3,4,5],\n      [6,7,8]\n    ]\n    let result=null\n    winningCombos.forEach((combo)=>{\n      let player = boardValues[combo[0]];\n      if (player===null) return;\n      let win=true;\n      for(let i=1; i<combo.length; i++){\n        if(player!==boardValues[combo[i]]){\n          win=false;\n          break;\n        }\n      }\n      if(win){\n        result= player;\n        return;\n      }\n    })\n    return result\n  }\n  \n  /*\n    we use the minmax algorithm where the o player wants the score to be the smallest possible and the x wants it to be the biggest\n  */\n  getBestMove(board=this.state.boardValues,turn=0,xIsNext=this.state.xIsNext){\n    board=board.slice()\n    let scores=[];  \n    let result=[-1,-1];\n    turn++;\n    for(let i=0;i<board.length;i++){ // we simulate every possible move and assign it score\n      \n      if(board[i]===null){  \n        result[1]=i;\n        if(xIsNext){\n          board[i]='x'\n        } else {\n          board[i]='o'\n        }\n        let winner=this.getWinner(board);\n        \n        let score=100-turn;\n        switch(winner){    //if the move causes somebody to win we return the score and the move\n          case 'o':\n            return [-score,i]\n            \n          case 'x':\n            return [score,i]\n            \n          default:    //else the algorithm simulates the rest of the game playing against itself\n            scores.push([this.getBestMove(board,turn,!xIsNext)[0],i])\n        }\n        board[i]=null;\n      }\n    }\n    if(result[1]===-1) return [0,0];\n    if(result[0]===-1) result=scores[0]\n    if(xIsNext){                          //the algorithm selects the best choice for its side\n      for(let i=0;i<scores.length;i++){\n        if(result[0]<scores[i][0]){\n          result=scores[i]\n        }\n      }\n    } else {\n      for(let i=0;i<scores.length;i++){\n        if(result[0]>scores[i][0]){\n          result=scores[i]\n        }\n      }\n    }\n    return result;\n  }\n  \n  \n  render(){\n    let squares=[];\n    \n    for(let i=0;i<9;i++){\n      squares.push(<Square value={this.state.boardValues[i]} onClick={()=>this.handleClick(i)}/>)\n    }\n    \n\n    let result=\"\";\n    if(this.state.turn===9){\n      result=\"DRAW\"\n    }\n    if(this.state.winner!==null){\n      if(this.state.winner==='x'){\n        result=\"X WINS!\"\n      } else {\n        result=\"O WINS!\"\n      }\n    }\n    \n    return (\n      <div className=\"Game\">\n        <div className=\"board\">\n          {squares}\n        </div>\n        <button className=\"reset\" onClick={()=>this.resetBoard()}>\n          <p>Reset game</p>\n        </button>\n        <div className=\"result\">\n          <p>{result}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Square extends Component {\n  render(){\n    return (\n      <button type=\"button\" className=\"Square\" onClick={()=>{this.props.onClick();}}>\n        <p className=\"tick\">{this.props.value}</p>\n      </button>\n    )\n  }\n}\n\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}